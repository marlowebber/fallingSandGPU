

#pragma kernel Divergence1

RWTexture2D<float4>   divergence1_in;

RWTexture2D<float4>   divergence1_out;

RWTexture2D<float4> divergence1_display;

[numthreads(8,8,1)]




void Divergence1 (uint3 id : SV_DispatchThreadID)
{

	const int size = 1024;
	
	
	float4 here = divergence1_in[id.xy];
	float4 nbrx = divergence1_in[id.xy + float2(-1,0) ];
	float4 nbry = divergence1_in[id.xy + float2(0,-1) ];
	float4 pbrx = divergence1_in[id.xy + float2(1,0) ];
	float4 pbry = divergence1_in[id.xy + float2(0,1) ];
	
	float4 result = here;
	
	/*
	
	r = vel x
	g = vel y
	b = press
	
	*/
	
	const float k = 0.25;
	
	
	result.x += (  here.z  - pbrx.z ) * k ;
	result.z += (  here.x  - pbrx.x ) * k ;
	
	result.x -= (  here.z  - nbrx.z ) * k ;
	result.z -= (  here.x  - nbrx.x ) * k ;
	
	result.y += (  here.z  - pbry.z ) * k ;
	result.z += (  here.y  - pbry.y ) * k ;
	
	result.y -= (  here.z  - nbry.z ) * k ;
	result.z -= (  here.y  - nbry.y ) * k ;
	
	//result.x *= 0.995;
	//result.y *= 0.995;
	//result.z += (1.0 - result.z) * 0.005;
	
	
	
	
	float nbravgx = (  nbrx.x  + pbrx.x  ) / 2;
	float nbravgy = (  nbry.y  + pbry.y  ) / 2;
	result.x += (nbravgx - result.x) * 0.5;
	result.y += (nbravgy - result.y) * 0.5;
	
	
	

	
    
    divergence1_out[id.xy] = result;
    const float magnif = 20.0;
    divergence1_display [id.xy] = float4(
	
		
		result.r * magnif + 0.5,
		result.g * magnif + 0.5,
		result.b * magnif + 0.5,
		1.0
	);    
}





