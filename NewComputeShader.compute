float4 advect_lookup(RWTexture2D<float4> particle_input , float2 addr)
{
	const float k_advection = 10.0f;
	float2 vel = particle_input[addr].xy * k_advection;
	float2 advect_addr = (addr - vel);
	return particle_input[advect_addr];
}

#pragma kernel Particle

RWTexture2D<float4> particle_input;
RWTexture2D<float4> particle_output	;
RWTexture2D<float4> particle_display	;

float advx;
float advy;

[numthreads(8,8,1)]

void Particle (uint3 id : SV_DispatchThreadID)
{
	const int size = 1024;

	float4 here = particle_input[id.xy];
	float4 result = here;

	float2 advr = float2(advx, advy);
	result = advect_lookup(particle_input, id.xy);

	float4 pbry = advect_lookup( particle_input , id.xy + float2(0,1) );
	float4 nbry = advect_lookup( particle_input , id.xy + float2(0,-1));
	float4 nbrx = advect_lookup( particle_input , id.xy + float2(-1,0));
	float4 pbrx = advect_lookup( particle_input , id.xy + float2(1,0) );

	const float k_interchange = 0.5;
	const float k_div = 0.5;
	const float k_z = 0.25;

	float dvx = (pbrx.x - nbrx.x);
	float dvy = (pbry.y - nbry.y);
	float dpx = (pbrx.z - nbrx.z);
	float dpy = (pbry.z - nbry.z);
	float div = (dvx + dvy) * k_div;

	result.z = ( pbrx.z + pbry.z + nbrx.z + nbry.z - div ) * k_z;
	result.x -= dpx * k_interchange;
	result.y -= dpy * k_interchange;

	particle_output[id.xy - advr] = result;

	const int boundary = 12;
	if (id.x < boundary || size-id.x < boundary || id.y < boundary || size-id.y < boundary)
	{
		particle_output[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
	}

}	