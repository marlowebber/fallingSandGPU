
float4 advect_lookup(RWTexture2D<float4> particle_input , float2 addr, float2 advr)
{
	const float k_advection = 5.0f;
	float2 vel = particle_input[addr].xy * k_advection;
	float2 advect_addr = (addr - vel) ;//- advr;
	return particle_input[advect_addr];
}

#pragma kernel Particle

RWTexture2D<float4> particle_input;
RWTexture2D<float4> particle_output	;
RWTexture2D<float4> particle_display	;

// RWTexture2D<float4> rigidbody_information	;

float advx;
float advy;

[numthreads(8,8,1)]

void Particle (uint3 id : SV_DispatchThreadID)
{
	const int size = 1024;
	/*
	r = particle x
	g = particle y
	b = particle pressure
	a = obstacle (0.0 = blocked, 1.0 = not blocked)
	*/

	const int boundary = 5;
	if (id.x < boundary || size-id.x < boundary || id.y < boundary || size-id.y < boundary)
	{
		particle_output[id.xy] = float4(0.0, 0.0, 0.5, 1.0);
		return;
	}

	float4 here = particle_input[id.xy];
	float4 result = here;
	
	//backward advection
	float2 advr = float2(advx, advy);
	result = advect_lookup(particle_input, id.xy, advr);

	if (here.a == 0.0){result.x = 0.0; result.y = 0.0;  }

	float4 pbry = advect_lookup( particle_input , id.xy + float2(0,1) , advr);
	float4 nbry = advect_lookup( particle_input , id.xy + float2(0,-1), advr);
	float4 nbrx = advect_lookup( particle_input , id.xy + float2(-1,0), advr);
	float4 pbrx = advect_lookup( particle_input , id.xy + float2(1,0) , advr);

	if (pbry.a == 0.0) {pbry = result;}
	if (nbry.a == 0.0) {nbry = result;}
	if (pbrx.a == 0.0) {pbrx = result;}
	if (nbrx.a == 0.0) {nbrx = result;}

	float dvx = (pbrx.x - nbrx.x);
	float dvy = (pbry.y - nbry.y);
	float dpx = (pbrx.z - nbrx.z);
	float dpy = (pbry.z - nbry.z);
	float div = (dvx + dvy) * 0.5;

	result.z = ( pbrx.z + pbry.z + nbrx.z + nbry.z - div ) * 0.25;
	result.x -= dpx * 0.5;
	result.y -= dpy * 0.5;

	result.x += (  0.5 - result.x) * 0.1;


	result.a = 1.0;
	particle_output[id.xy] = result;






}