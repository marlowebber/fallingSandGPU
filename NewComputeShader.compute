
#pragma kernel FallingSand

float falling_rand;
Texture2D<float4> ResultInput;
RWTexture2D<float4> ResultOutput;

[numthreads(8,8,1)]

void FallingSand (uint3 id : SV_DispatchThreadID)
{
	float2 below = float2(id.x  + (falling_rand * 5) - 2  , id.y  -1   );
	if (ResultInput[id.xy].r > 0.5)
	{
		if (ResultInput[below].r < 0.5 && id.y > 5 && id.x > 5 && id.x < 1024-5)
		{
			ResultOutput[below] = float4(1.0, 0.0, 0.0, 1.0);
			ResultOutput[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
		}
	}
}






#pragma kernel Airflow

float airflow_rand;
Texture2D<float4> airflow_input;
RWTexture2D<float4> airflow_output	;

[numthreads(8,8,1)]

void Airflow (uint3 id : SV_DispatchThreadID)
{
	const int size = 1024;
	// R is vel_x, green is vel_y, and blue is pressure

	const float k_pv = 0.125;
	const float k_sm = 0.125;
	const float k_tk = 0.0;
	
	
	float dp = 0.0;
	float dx = 0.0;
	float dy = 0.0;
	
	// pv interchange
	float4 air_here  = airflow_input[id.xy];
	float4 air_below = airflow_input[ float2(id.x, id.y-1)];
	float4 air_above = airflow_input[ float2(id.x, id.y+1)];
	float4 air_l     = airflow_input[ float2(id.x-1, id.y)];
	float4 air_r     = airflow_input[ float2(id.x+1, id.y)];
	
	dp += (air_here.r  - air_l.r    ) * k_pv;
	dp += (air_here.r  - air_r.r    ) * k_pv * -1;
	dp += (air_here.g -  air_below.g) * k_pv * -1;
	dp += (air_here.g  - air_above.g) * k_pv ;
	dx += (air_here.b  - air_l.b    ) * k_pv ;
	dx += (air_here.b  - air_r.b    ) * k_pv * -1;
	dy += (air_here.b  - air_below.b) * k_pv * -1;
	dy += (air_here.b  - air_above.b) * k_pv;
	
	// smoothing
	float4 avg = (air_here + air_below + air_above + air_l + air_r) / 5;
	dx += (avg.r - air_here.r) * k_sm;
	dy += (avg.g - air_here.g) * k_sm;
	dp += (avg.b - air_here.b) * k_sm;
	
	// take
	float2 take_from_pos = float2(id.x + (air_here.r / 2), id.y + (air_here.g / 2) );
	dx -= ( air_here.r - airflow_input[take_from_pos].r     ) * k_tk;
	dy -= ( air_here.g - airflow_input[take_from_pos].g     ) * k_tk;
	
	
	airflow_output[id.xy] = float4(  airflow_input[id.xy].r + dx,  airflow_input[id.xy].g + dy, airflow_input[id.xy].b + dp, 1.0  );
}
