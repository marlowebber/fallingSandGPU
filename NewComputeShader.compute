
float2 advect_addr(RWTexture2D<float4>   divergence1_in , float2 id )
{

return id - (divergence1_in[id].xy * divergence1_in[id].z * 10.0);
}



#pragma kernel Divergence1

RWTexture2D<float4>   divergence1_in;

RWTexture2D<float4>   divergence1_out;

RWTexture2D<float4> divergence1_display;

[numthreads(8,8,1)]



void Divergence1 (uint3 id : SV_DispatchThreadID)
{

	const int size = 1024;
	
	 
	
	
	float2 here_addr = id.xy;
	float4 here = divergence1_in[id.xy]	;
	float4 result = divergence1_in[id.xy]	;
	
	float4 nbrx = divergence1_in[here_addr + float2(-1,0) ];
	float4 nbry = divergence1_in[here_addr + float2(0,-1) ];
	float4 pbrx = divergence1_in[here_addr + float2(1,0) ];
	float4 pbry = divergence1_in[here_addr + float2(0,1) ];
	
	
	/*
	
	r = vel x
	g = vel y
	b = press
	
	*/
	
	const float k = 0.25;
	const float smoothing = 1.0;
	const float decay = 0.0;
	
	float v2p = ((  here.x - pbrx.x ) + (  here.y  - pbry.y ) - (  here.x  - nbrx.x ) - (  here.y  - nbry.y )) * k;
	result.z += v2p;
	

	float2 p2v = float2(
		((  here.z  - pbrx.z ) - (  here.z  - nbrx.z )),
		((  here.z  - pbry.z ) - (  here.z  - nbry.z ))
	) * k;
	result.xy += p2v;

	
	
	
	
	
	
	
	result.x *= (1.0 - decay);
	result.y *= (1.0 - decay);
	result.z += (0.5 - result.z) * decay;
	
	float nbravgx = (  nbrx.x  + pbrx.x  ) / 2;
	float nbravgy = (  nbry.y  + pbry.y  ) / 2;
	result.x += (nbravgx - result.x) * 0.5 * smoothing;
	result.y += (nbravgy - result.y) * 0.5 * smoothing;
	
	
	
	
	
	

	
    
    divergence1_out[id.xy] = result;
    const float magnif = 20.0;
    
    float velt = abs(result.r) + abs(result.g) * magnif;
    
    divergence1_display [id.xy] = float4(
	
		
		result.x,
		result.y,
		result.z,
		1.0
	);    
}





